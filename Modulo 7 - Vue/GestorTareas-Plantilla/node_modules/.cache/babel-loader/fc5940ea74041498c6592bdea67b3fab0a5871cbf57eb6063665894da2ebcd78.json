{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: \"TaskList\",\n  data() {\n    return {\n      tasks: [],\n      newTask: ''\n    };\n  },\n  methods: {\n    async fetchTasks() {\n      try {\n        const response = await axios.get('https://dummyjson.com/todos');\n        this.tasks = response.data.todos;\n      } catch (error) {\n        console.error('Error al cargar las tareas:', error);\n      }\n    },\n    addTask() {\n      if (this.newTask.trim() === '') return;\n      const newTask = {\n        id: Date.now(),\n        todo: this.newTask,\n        completed: false\n      };\n      this.tasks.unshift(newTask);\n      this.newTask = '';\n    },\n    toggleCompletion(taskId) {\n      const task = this.tasks.find(t => t.id === taskId);\n      if (task) task.completed = !task.completed;\n    },\n    deleteTask(taskId) {\n      this.tasks = this.tasks.filter(task => task.id !== taskId);\n    },\n    updateTasks(tasks) {\n      this.tasks = tasks;\n    }\n  },\n  mounted() {\n    this.fetchTasks();\n  }\n};","map":{"version":3,"names":["axios","name","data","tasks","newTask","methods","fetchTasks","response","get","todos","error","console","addTask","trim","id","Date","now","todo","completed","unshift","toggleCompletion","taskId","task","find","t","deleteTask","filter","updateTasks","mounted"],"sources":["src/components/CombinedView.vue"],"sourcesContent":["<template>\r\n  <div class=\"task-list container pt-5\">\r\n    <h1 class=\"text-center my-4\" style=\"color: rgba(130, 0, 182, 0.7); text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);\">Lista de Tareas</h1>\r\n\r\n    <div class=\"add-task-container mb-3 d-flex\">\r\n      <input\r\n        v-model=\"newTask\"\r\n        placeholder=\"Añadir nueva tarea\"\r\n        @keyup.enter=\"addTask\"\r\n        class=\"task-input form-control\"\r\n        style=\"border-radius: 20px 0 0 20px;\"\r\n      />\r\n      <button @click=\"addTask\" class=\"add-button btn btn-success\" style=\"border-radius: 0 10px 10px 0;\">Añadir</button>\r\n    </div>\r\n\r\n    <div class=\"tasks-container\">\r\n      <div v-for=\"task in tasks\" :key=\"task.id\" class=\"task-item mb-3 p-3 border rounded bg-light\">\r\n        <div class=\"task-content text-center\">\r\n          <p :class=\"{ completed: task.completed }\">{{ task.todo }}</p>\r\n          <div :class=\"{'status-pending': !task.completed, 'status-completed': task.completed}\" class=\"task-status text-center\">\r\n            {{ task.completed ? 'Completada' : 'Pendiente' }}\r\n          </div>\r\n          <div class=\"task-buttons d-flex justify-content-end mt-2\">\r\n            <button @click=\"toggleCompletion(task.id)\" class=\"btn btn-outline-primary me-2\">\r\n              <i class=\"fas fa-check\"></i> Completar\r\n            </button>\r\n            <button @click=\"deleteTask(task.id)\" class=\"btn btn-outline-danger\">\r\n              <i class=\"fas fa-trash\"></i> Eliminar\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"tasks.length === 0\" class=\"no-tasks text-center\">\r\n      <p>No hay tareas disponibles</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: \"TaskList\",\r\n  data() {\r\n    return {\r\n      tasks: [],\r\n      newTask: '',\r\n    };\r\n  },\r\n  methods: {\r\n    async fetchTasks() {\r\n      try {\r\n        const response = await axios.get('https://dummyjson.com/todos');\r\n        this.tasks = response.data.todos;\r\n      } catch (error) {\r\n        console.error('Error al cargar las tareas:', error);\r\n      }\r\n    },\r\n    addTask() {\r\n      if (this.newTask.trim() === '') return;\r\n      const newTask = {\r\n        id: Date.now(),\r\n        todo: this.newTask,\r\n        completed: false,\r\n      };\r\n      this.tasks.unshift(newTask);\r\n      this.newTask = '';\r\n    },\r\n    toggleCompletion(taskId) {\r\n      const task = this.tasks.find(t => t.id === taskId);\r\n      if (task) task.completed = !task.completed;\r\n    },\r\n    deleteTask(taskId) {\r\n      this.tasks = this.tasks.filter(task => task.id !== taskId);\r\n    },\r\n    updateTasks(tasks) {\r\n      this.tasks = tasks;\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchTasks();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.completed {\r\n  text-decoration: line-through;\r\n  color: #888;\r\n}\r\n\r\n/* Estilos para el estado de la tarea */\r\n.task-status {\r\n  padding: 5px;\r\n  margin-top: 5px;\r\n  border-radius: 4px;\r\n  display: inline-block;\r\n}\r\n\r\n.status-pending {\r\n  background-color: gold;\r\n  color: black;\r\n}\r\n\r\n.status-completed {\r\n  background-color: lightgreen;\r\n  color: black;\r\n}\r\n</style>\r\n"],"mappings":"AAyCA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,KAAA;MACAC,OAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,WAAA;MACA;QACA,MAAAC,QAAA,SAAAP,KAAA,CAAAQ,GAAA;QACA,KAAAL,KAAA,GAAAI,QAAA,CAAAL,IAAA,CAAAO,KAAA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,gCAAAA,KAAA;MACA;IACA;IACAE,QAAA;MACA,SAAAR,OAAA,CAAAS,IAAA;MACA,MAAAT,OAAA;QACAU,EAAA,EAAAC,IAAA,CAAAC,GAAA;QACAC,IAAA,OAAAb,OAAA;QACAc,SAAA;MACA;MACA,KAAAf,KAAA,CAAAgB,OAAA,CAAAf,OAAA;MACA,KAAAA,OAAA;IACA;IACAgB,iBAAAC,MAAA;MACA,MAAAC,IAAA,QAAAnB,KAAA,CAAAoB,IAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAV,EAAA,KAAAO,MAAA;MACA,IAAAC,IAAA,EAAAA,IAAA,CAAAJ,SAAA,IAAAI,IAAA,CAAAJ,SAAA;IACA;IACAO,WAAAJ,MAAA;MACA,KAAAlB,KAAA,QAAAA,KAAA,CAAAuB,MAAA,CAAAJ,IAAA,IAAAA,IAAA,CAAAR,EAAA,KAAAO,MAAA;IACA;IACAM,YAAAxB,KAAA;MACA,KAAAA,KAAA,GAAAA,KAAA;IACA;EACA;EACAyB,QAAA;IACA,KAAAtB,UAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}