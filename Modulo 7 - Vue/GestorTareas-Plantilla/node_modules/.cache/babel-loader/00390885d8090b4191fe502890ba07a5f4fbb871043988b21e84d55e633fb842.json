{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      tasks: [],\n      newTask: ''\n    };\n  },\n  mounted() {\n    this.fetchTasks();\n  },\n  methods: {\n    async fetchTasks() {\n      try {\n        const response = await axios.get('https://dummyjson.com/todos');\n        this.tasks = response.data.todos;\n      } catch (error) {\n        console.error('Error al cargar las tareas:', error);\n      }\n    },\n    addTask() {\n      if (this.newTask.trim() === '') return;\n      const newTask = {\n        id: Date.now(),\n        todo: this.newTask,\n        completed: false\n      };\n      this.tasks.unshift(newTask);\n      this.newTask = '';\n    },\n    toggleCompletion(taskId) {\n      const task = this.tasks.find(t => t.id === taskId);\n      if (task) task.completed = !task.completed;\n    },\n    deleteTask(taskId) {\n      this.tasks = this.tasks.filter(task => task.id !== taskId);\n    }\n  }\n};","map":{"version":3,"names":["axios","data","tasks","newTask","mounted","fetchTasks","methods","response","get","todos","error","console","addTask","trim","id","Date","now","todo","completed","unshift","toggleCompletion","taskId","task","find","t","deleteTask","filter"],"sources":["src/components/CombinedView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Lista de Tareas</h1>\r\n    <div class=\"add-task-container\">\r\n      <input v-model=\"newTask\" placeholder=\"Añadir nueva tarea\" @keyup.enter=\"addTask\" class=\"task-input\" />\r\n      <button @click=\"addTask\" class=\"add-button\">Añadir Tarea</button>\r\n    </div>\r\n    <div v-if=\"tasks.length\" class=\"tasks-container\">\r\n      <div v-for=\"task in tasks\" :key=\"task.id\" class=\"recent-task-box\">\r\n        <div class=\"task-content\">\r\n          <span :class=\"{ completed: task.completed }\">{{ task.todo }}</span>\r\n          <div :class=\"task.completed ? 'status-completed' : 'status-pending'\" class=\"task-status\">\r\n            {{ task.completed ? 'Completada' : 'Pendiente' }}\r\n          </div>\r\n        </div>\r\n        <div class=\"task-buttons\">\r\n          <button @click=\"toggleCompletion(task.id)\" class=\"icon-button\">\r\n            <i class=\"fas fa-check\"></i>\r\n          </button>\r\n          <button @click=\"deleteTask(task.id)\" class=\"icon-button delete\">\r\n            <i class=\"fas fa-trash\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <p v-else>No hay tareas disponibles</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      tasks: [],\r\n      newTask: '',\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchTasks();\r\n  },\r\n  methods: {\r\n    async fetchTasks() {\r\n      try {\r\n        const response = await axios.get('https://dummyjson.com/todos');\r\n        this.tasks = response.data.todos;\r\n      } catch (error) {\r\n        console.error('Error al cargar las tareas:', error);\r\n      }\r\n    },\r\n    addTask() {\r\n      if (this.newTask.trim() === '') return;\r\n      const newTask = {\r\n        id: Date.now(),\r\n        todo: this.newTask,\r\n        completed: false,\r\n      };\r\n      this.tasks.unshift(newTask);\r\n      this.newTask = '';\r\n    },\r\n    toggleCompletion(taskId) {\r\n      const task = this.tasks.find(t => t.id === taskId);\r\n      if (task) task.completed = !task.completed;\r\n    },\r\n    deleteTask(taskId) {\r\n      this.tasks = this.tasks.filter(task => task.id !== taskId);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.add-task-container {\r\n  display: flex;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.recent-task-box {\r\n  margin-top: 15px;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  background-color: #f9f9f9;\r\n  max-width: 1000px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n}\r\n\r\n.task-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n.task-input {\r\n  flex-grow: 1;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 20px 0 0 20px;\r\n  font-size: 14px;\r\n}\r\n\r\n.task-buttons {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 10px;\r\n}\r\n\r\n.add-button {\r\n  padding: 10px;\r\n  border: none;\r\n  border-radius: 0 4px 4px 0;\r\n  cursor: pointer;\r\n  background-color: #42b983;\r\n  color: white;\r\n  font-size: 14px;\r\n  width: 100px;\r\n}\r\n\r\n.add-button:hover{\r\n  background-color: #169159;\r\n}\r\n\r\n.completed {\r\n  text-decoration: line-through;\r\n  color: green;\r\n}\r\n\r\n.icon-button {\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 18px;\r\n}\r\n\r\n.icon-button.delete {\r\n  color: #e74c3c;\r\n}\r\n\r\n.icon-button:hover {\r\n  opacity: 0.7;\r\n}\r\n\r\n/* Estilo para el estado de las tareas */\r\n.task-status {\r\n  padding: 5px;\r\n  margin-top: 5px;\r\n  border-radius: 4px;\r\n  display: inline-block;\r\n}\r\n\r\n.status-completed {\r\n  background-color: lightgreen;\r\n  color: black;\r\n}\r\n\r\n.status-pending {\r\n  background-color: gold;\r\n  color: black;\r\n}\r\n</style>\r\n"],"mappings":"AA8BA,OAAAA,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,KAAA;MACAC,OAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,UAAA;EACA;EACAC,OAAA;IACA,MAAAD,WAAA;MACA;QACA,MAAAE,QAAA,SAAAP,KAAA,CAAAQ,GAAA;QACA,KAAAN,KAAA,GAAAK,QAAA,CAAAN,IAAA,CAAAQ,KAAA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,gCAAAA,KAAA;MACA;IACA;IACAE,QAAA;MACA,SAAAT,OAAA,CAAAU,IAAA;MACA,MAAAV,OAAA;QACAW,EAAA,EAAAC,IAAA,CAAAC,GAAA;QACAC,IAAA,OAAAd,OAAA;QACAe,SAAA;MACA;MACA,KAAAhB,KAAA,CAAAiB,OAAA,CAAAhB,OAAA;MACA,KAAAA,OAAA;IACA;IACAiB,iBAAAC,MAAA;MACA,MAAAC,IAAA,QAAApB,KAAA,CAAAqB,IAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAV,EAAA,KAAAO,MAAA;MACA,IAAAC,IAAA,EAAAA,IAAA,CAAAJ,SAAA,IAAAI,IAAA,CAAAJ,SAAA;IACA;IACAO,WAAAJ,MAAA;MACA,KAAAnB,KAAA,QAAAA,KAAA,CAAAwB,MAAA,CAAAJ,IAAA,IAAAA,IAAA,CAAAR,EAAA,KAAAO,MAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}